bad<-is.na(x)
x[!bad]
bad
x<-c(1,2,NA,4,NA,6)
y<-c("a","b","c",NA,NA,"f")
good<-complete.cases(x,y)
good
x[good]
y[good]
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15)#,row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie")
)
x
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes","yes","no",NA,"yes","no")
)
x
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes","yes","no",NA,"yes","no")
)
x
good<-complete.cases(x)
x[good,][1:6,]
x[good,][1:5,]
good<-complete.cases(x)
good
c.bind(good)
cbind(good)
help(count)
help()
countcbind(!good)
cbind(!good)
cbind(good)
y<-cbind(good)
x[T>y]
x[T<y]
x[TRUE<y]
good[TRUE<y]
good[TRUE>y]
length(good[TRUE>y])
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes",NA,"no",NA,"yes","no")
)
x
good<-complete.cases(x)
y<-cbind(good)
length(good[TRUE>y])
x[good,][1:4,] # length of initial list minus NA rows
length(x)
width(x)
help(length())
help(length
help(length)
help(length)
length(x[,1])
x[good,][1:4,] # length of initial list minus NA rows
x[good,][1:6,] # length of initial list minus NA rows
x[good,][1:4,] # length of initial list minus NA rows
# Removing NA from data.frames
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes",NA,"no",NA,"yes","no")
)
x
good<-complete.cases(x)
y<-cbind(good)
length(good[TRUE>y])
length(x[,1])
x[good,][1:6,] # length of initial list minus NA rows
x[good,][1:4,] # length of initial list minus NA rows
length(Voting="yes")
length(x$Voting="yes")
length(x$Voting)
Voting
x$Voting
m<-matrix(nrow=2,ncol=3)
m
dim(m) # dimensions
attributes(m)
m<-matrix(1:6,nrow=2,ncol=3)
m
m<-1:10
m
dim(m)<-c(2,5)
m
dim(m)<-c(5,2)
m
x<-1:3
y<-10:12
xy<-cbind(x,y)
xy
xy<-rbind(x,y)
xy
x<-list(1.23,"a",2L,T)
###
# Week1
# Data Types (Part3)
###
x
x<-factor(c("yes","no","maybe","maybe","yes","yes","no"))
x
table(x)
table(x)#$Voting
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes",NA,"no",NA,"yes","no")
)
x
good<-complete.cases(x)
y<-cbind(good)
length(good[TRUE>y])
length(x[,1])
x[good,][1:6,] # length of initial list minus NA rows
x[good,][1:4,] # length of initial list minus NA rows
table(x)
table(x$Voting)
x$Voting
# Removing NA from data.frames
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes",NA,"no",NA,"yes","no")
)
x
good<-complete.cases(x)
y<-cbind(good)
length(good[TRUE>y])
length(x[,1])
x[good,][1:6,] # length of initial list minus NA rows
x[good,][1:4,] # length of initial list minus NA rows
x$Voting
table(x$Voting)
table(x$Gender)
x[good,][1:4,] # length of initial list minus NA rows
xnew<-x[good,][1:4,] # length of initial list minus NA rows
table(xnew)
xnew
x$Voting
xnew<-x[good,][1:4,] # length of initial list minus NA rows
xnew
length(xnew[,1])
x$Voting
# Removing NA from data.frames
x<-data.frame(Gender=c("male","female","male","male","male","female"), Age=c(24,25,24,28,32,15),row.names=c("Herbert","Siglinde","Karl","Hans-Peter","Kurt","Melanie"),Voting=c("yes",NA,"no",NA,"yes","no")
)
x
good<-complete.cases(x)
y<-cbind(good)
length(good[TRUE>y])
length(x[,1])
bad<-complete.cases(x)
y<-cbind(bad)
length(bad[TRUE>y])
length(x[,1])
x[good,][1:6,] # length of initial list minus NA rows
x[good,][1:4,] # length of initial list minus NA rows
xnew<-x[good,][1:4,] # length of initial list minus NA rows
xnew
length(xnew[,1])
install.packages("swirl")
swirl()
library(swirl)
library(swirl)
library("swirl")
help(update)
help()
update.packages
install.packages("swirl")
# rm(list=ls())
rm(list=ls())
18+7+5+9+6+20+25
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
#1. set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
#2. get the value of the matrix
get <- function() x
#3. set the value of inverse of the matrix
setinverse <- function(inverse) inv <<- inverse
#4. get the value of inverse of the matrix
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
A<-matrix(1:10,nr=5,nc=2)
A
makeCacheMatrix(A)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# set stores the matrix in x, clears a previously cached m
set <- function(y) {
x <<- y
m <<- NULL
}
# get retrieves the matrix from x
get <- function() x
# setinv stores the inverted matrix in m
setinv <- function(inv) m <<- inv
# getinv retrieves the inverted matrix from m
getinv <- function() m
# return a list of functions with named indices
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(A)
install.packages("markdown")
install.packages("xtable")
setwd("/Users/saxxess/Dropbox/Coursera/Data Science/03 Getting and Cleaning Data/Project/")
# getwd()
# checking if file directory already exists
if(!file.exists("./data")){dir.create("./data")}
setwd("./data")
# downloading and unziping the file
if(!file.exists("AccelerometerData.zip")){
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL,destfile="./data/AccelerometerData.zip", method="curl")
unzip("./data/AccelerometerData.zip")
}
setwd("..")
# reading the test-files
if(file.exists("./test")){
setwd("./test")
###
# put the reading test data here
###
setwd("..")
} else {warning("AccelerometerData.zip was not correctly unzipped. The directory << ./test >> is missing")}
# reading the train-files
if(file.exists("./train")){
setwd("./train")
###
# put the reading train data here
###
setwd("..")
} else {warning("AccelerometerData.zip was not correctly unzipped. The directory << ./train >> is missing")}
###
# Test
###
setwd("./test")
subject_test<-read.table("subject_test.txt")
# ncol(subject_test)
# nrow(subject_test)
# head(subject_test)
# names(subject_test)
X_test<-read.table("X_test.txt")
# ncol(X_test)
# nrow(X_test)
# head(X_test)
# names(X_test)
y_test<-read.table("y_test.txt")
# ncol(y_test)
# nrow(y_test)
# head(y_test)
# row.names(y_test)
###
# Train
###
setwd("..")
setwd("./train")
subject_train<-read.table("subject_train.txt")
# ncol(subject_train)
# nrow(subject_train)
# head(subject_train)
# names(subject_train)
X_train<-read.table("X_train.txt")
# ncol(X_train)
# nrow(X_train)
# head(X_train)
# names(X_train)
y_train<-read.table("y_train.txt")
# ncol(y_train)
# nrow(y_train)
# head(y_train)
# row.names(y_train)
###
# Features
###
setwd("..")
features<-read.table("features.txt")
# ncol(features)
# nrow(features)
# head(features)
# names(features)
##############
##############
# if(!("data.table" %in% row.names(installed.packages()))){
#       install.packages(data.table)
# }
# library(data.table)
test <- data.frame(count = 1:nrow(subject_test))#, subjects = subject_test)
# library(plyr) # maybe needed
test$subject_test <- subject_test
# head(test)
# names(test$subject_test) <- c("subject_test")
# head(test)
colnames(X_test) <- features$V2
colnames(y_test) <- "activity_labels"
# head(X_test)
# merging datasets
# test und y_test
y_test$count <- 1:nrow(y_test)
y_test[y_test$activity_labels==1,1] <- "activity_walking"
y_test[y_test$activity_labels=="2",1] <- "activity_walking_upstairs"
y_test[y_test$activity_labels=="3",1] <- "activity_walking_downstairs"
y_test[y_test$activity_labels=="4",1] <- "activity_sitting"
y_test[y_test$activity_labels=="5",1] <- "activity_standing"
y_test[y_test$activity_labels=="6",1] <- "activity_laying"
test <- merge(test, y_test, by = "count")
# y_test$activity_labels <- as.vector(y_test$activity_labels)
# class(y_test$activity_labels)
# head(y_test)
# test und X_test
X_test$count <- 1:nrow(X_test)
test <- merge(test, X_test, by = "count")
# head(names(test),20)
# names(test)
library(stringr)
# head(names(test),20)
# head(str_detect(names(test), c("ubject_test", "y_tes", "mean", "std")),20)
# bug string cannot detect more than one search-condition)
count <- 1:length(names(test))
good <- c(
count[str_detect(names(test), "subject_test")],
count[str_detect(names(test), "std")],
count[str_detect(names(test), "mean")],
count[str_detect(names(test), "Mean")],
count[str_detect(names(test), "activity_labels")]
)
bad <- count[!(count %in% good)]
bad <- sort(bad,decreasing=T)
# removing other than mean or std
library(data.table)
cleanTest <- as.data.table(test)
options(warn = -1)
for (i in bad){
cleanTest[,names(cleanTest)[i]:=NULL]
}
options(warn = 0)
names(cleanTest)
head(cleanTest)
cleanTest[[1]]
cleanTest[[2]]
head(cleanTest[[2]])
head(cleanTest[[3]])
cleanTest[[3]]
head(cleanTest)
class(cleanTest)
cleanTest <- as.data.table(cleanTest)
class(cleanTest)
dim(cleanTest)
cleanTest <- as.data.frame(cleanTest)
dim(cleanTest)
class(cleanTest)
head(cleanTest)
names(test)
class(cleanTest)
dim(cleanTest)
cleanTest[,names(cleanTest)[1]:=NULL]
cleanTest <- as.data.table(cleanTest)
class(cleanTest)
dim(cleanTest)
cleanTest[,names(cleanTest)[1]:=NULL]
dim(cleanTest)
class(cleanTest)
head(cleanTest)
names(cleanTest)
subject_test
names(cleanTest)
names(cleanTest)[2]
cleanTest$names(cleanTest)[2]
names(cleanTest)
head(cleanTest)
names(test)
class(cleanTest)
dim(cleanTest)
# set your own working directory here
setwd("/Users/saxxess/Dropbox/Coursera/Data Science/03 Getting and Cleaning Data/Project/")
# getwd()
# checking if file directory already exists
if(!file.exists("./data")){dir.create("./data")}
setwd("./data")
# downloading and unziping the file
if(!file.exists("AccelerometerData.zip")){
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL,destfile="./data/AccelerometerData.zip", method="curl")
unzip("./data/AccelerometerData.zip")
}
setwd("..")
# reading the test-files
if(file.exists("./test")){
setwd("./test")
###
# put the reading test data here
###
setwd("..")
} else {warning("AccelerometerData.zip was not correctly unzipped. The directory << ./test >> is missing")}
# reading the train-files
if(file.exists("./train")){
setwd("./train")
###
# put the reading train data here
###
setwd("..")
} else {warning("AccelerometerData.zip was not correctly unzipped. The directory << ./train >> is missing")}
###
# Test
###
setwd("./test")
subject_test<-read.table("subject_test.txt")
# ncol(subject_test)
# nrow(subject_test)
# head(subject_test)
# names(subject_test)
X_test<-read.table("X_test.txt")
# ncol(X_test)
# nrow(X_test)
# head(X_test)
# names(X_test)
y_test<-read.table("y_test.txt")
# ncol(y_test)
# nrow(y_test)
# head(y_test)
# row.names(y_test)
###
# Train
###
setwd("..")
setwd("./train")
subject_train<-read.table("subject_train.txt")
# ncol(subject_train)
# nrow(subject_train)
# head(subject_train)
# names(subject_train)
X_train<-read.table("X_train.txt")
# ncol(X_train)
# nrow(X_train)
# head(X_train)
# names(X_train)
y_train<-read.table("y_train.txt")
# ncol(y_train)
# nrow(y_train)
# head(y_train)
# row.names(y_train)
###
# Features
###
setwd("..")
features<-read.table("features.txt")
# ncol(features)
# nrow(features)
# head(features)
# names(features)
##############
##############
# if(!("data.table" %in% row.names(installed.packages()))){
#       install.packages(data.table)
# }
# library(data.table)
test <- data.frame(count = 1:nrow(subject_test))#, subjects = subject_test)
# library(plyr) # maybe needed
test$subject_test <- subject_test
# head(test)
# names(test$subject_test) <- c("subject_test")
# head(test)
colnames(X_test) <- features$V2
colnames(y_test) <- "activity_labels"
# head(X_test)
# merging datasets
# test und y_test
y_test$count <- 1:nrow(y_test)
y_test[y_test$activity_labels==1,1] <- "activity_walking"
y_test[y_test$activity_labels=="2",1] <- "activity_walking_upstairs"
y_test[y_test$activity_labels=="3",1] <- "activity_walking_downstairs"
y_test[y_test$activity_labels=="4",1] <- "activity_sitting"
y_test[y_test$activity_labels=="5",1] <- "activity_standing"
y_test[y_test$activity_labels=="6",1] <- "activity_laying"
test <- merge(test, y_test, by = "count")
# y_test$activity_labels <- as.vector(y_test$activity_labels)
# class(y_test$activity_labels)
# head(y_test)
# test und X_test
X_test$count <- 1:nrow(X_test)
test <- merge(test, X_test, by = "count")
# head(names(test),20)
# names(test)
library(stringr)
# head(names(test),20)
# head(str_detect(names(test), c("ubject_test", "y_tes", "mean", "std")),20)
# bug string cannot detect more than one search-condition)
count <- 1:length(names(test))
good <- c(
count[str_detect(names(test), "subject_test")],
count[str_detect(names(test), "std")],
count[str_detect(names(test), "mean")],
count[str_detect(names(test), "Mean")],
count[str_detect(names(test), "activity_labels")]
)
bad <- count[!(count %in% good)]
bad <- sort(bad,decreasing=T)
# removing other than mean or std
library(data.table)
cleanTest <- test
options(warn = -1)
for (i in bad){
cleanTest[,names(cleanTest)[1]:=NULL]
#       cleanTest$names(cleanTest)[2]
#       assign
}
options(warn = 0)
cleanTest <- as.data.table(cleanTest)
### go on here
names(cleanTest)
head(cleanTest)
cleanTest <- as.data.frame(cleanTest)
head(cleanTest)
nrows(cleanTest)
ncol(cleanTest)
nrow(cleanTest)
table(cleanTest)
table(cleanTest$2)
